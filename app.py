import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –æ–ø–ª–∞—Ç –≤–∏–∑–∏—Ç–æ–≤",
    page_icon="üí∞",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect('payments.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS paid_visits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subject_id TEXT,
            visit_name TEXT,
            visit_date TEXT,
            payment_date TEXT,
            payment_amount REAL
        )
    ''')
    conn.commit()
    conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
def load_paid_visits():
    conn = sqlite3.connect('payments.db')
    try:
        df = pd.read_sql_query("SELECT * FROM paid_visits", conn)
        return df
    except:
        return pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date', 'payment_date', 'payment_amount'])
    finally:
        conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
def save_paid_visits(visits_df):
    conn = sqlite3.connect('payments.db')
    visits_df.to_sql('paid_visits', conn, if_exists='append', index=False)
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
def process_visits(uploaded_df):
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    uploaded_df.columns = ['subject_id', 'visit_name', 'visit_date']
   
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
    uploaded_df['visit_date'] = pd.to_datetime(uploaded_df['visit_date']).dt.strftime('%Y-%m-%d')
   
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã
    paid_visits = load_paid_visits()
   
    if not paid_visits.empty:
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¢–û–õ–¨–ö–û –ø–æ ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
        uploaded_df['comparison_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_name'].astype(str)
        paid_visits['comparison_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_name'].astype(str)
       
        # –ù–∞—Ö–æ–¥–∏–º –≤–∏–∑–∏—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã (–ø–æ ID + –Ω–∞–∑–≤–∞–Ω–∏–µ)
        already_paid_mask = uploaded_df['comparison_key'].isin(paid_visits['comparison_key'])
       
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ –∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
        new_visits = uploaded_df[~already_paid_mask].copy()
        duplicate_visits = uploaded_df[already_paid_mask].copy()
       
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–ª–∞—Ç–∞—Ö –∫ –¥—É–±–ª–∏–∫–∞—Ç–∞–º
        if not duplicate_visits.empty:
            duplicate_visits = duplicate_visits.merge(
                paid_visits[['comparison_key', 'visit_date', 'payment_date']].rename(columns={
                    'visit_date': 'previous_visit_date',
                    'payment_date': 'previous_payment_date'
                }),
                on='comparison_key',
                how='left'
            )
       
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        new_visits = new_visits.drop('comparison_key', axis=1) if not new_visits.empty else new_visits
        duplicate_visits = duplicate_visits.drop('comparison_key', axis=1) if not duplicate_visits.empty else duplicate_visits
       
    else:
        new_visits = uploaded_df.copy()
        duplicate_visits = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
   
    return new_visits, duplicate_visits, paid_visits

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    init_database()
   
    st.title("üí∞ –°–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –æ–ø–ª–∞—Ç –≤–∏–∑–∏—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º")
    st.markdown("---")
   
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        st.markdown("""
        **–§–æ—Ä–º–∞—Ç Excel-—Ñ–∞–π–ª–∞:**
        - –°—Ç–æ–ª–±–µ—Ü A: ID —Å—É–±—ä–µ–∫—Ç–∞
        - –°—Ç–æ–ª–±–µ—Ü B: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞  
        - –°—Ç–æ–ª–±–µ—Ü C: –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞
       
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
        1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª
        2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ
        3. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∞–∫—Ç –æ–ø–ª–∞—Ç—ã
        4. –û—Ç–º–µ—Ç—å—Ç–µ –≤–∏–∑–∏—Ç—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
       
        **‚ö†Ô∏è –í–∞–∂–Ω–æ:**
        –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥—É–±–ª–∏ –ø–æ
        ID –ø–∞—Ü–∏–µ–Ω—Ç–∞ + –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞
        (–¥–∞—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
        """)
       
        st.markdown("---")
       
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        paid_visits = load_paid_visits()
        if not paid_visits.empty:
            st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.metric("–í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤", len(paid_visits))
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤", paid_visits['subject_id'].nunique())
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑–∏—Ç–æ–≤", paid_visits['visit_name'].nunique())
   
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
   
    with col1:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–∑–∏—Ç–æ–≤",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: ID —Å—É–±—ä–µ–∫—Ç–∞, –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞, –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞"
        )
       
        if uploaded_file is not None:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = pd.read_excel(uploaded_file)
               
                st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
               
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                st.subheader("üëÄ –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(df.head(10), use_container_width=True)
               
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                new_visits, duplicate_visits, paid_visits = process_visits(df.copy())
               
                st.markdown("---")
               
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
                col_result1, col_result2, col_result3 = st.columns(3)
               
                with col_result1:
                    st.subheader("üÜï –ù–æ–≤—ã–µ –≤–∏–∑–∏—Ç—ã –∫ –æ–ø–ª–∞—Ç–µ")
                    if not new_visits.empty:
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(new_visits)} –Ω–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤")
                        st.dataframe(new_visits, use_container_width=True)
                       
                        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–±—ä–µ–∫—Ç–∞–º
                        summary = new_visits.groupby('subject_id').size().reset_index(name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∏–∑–∏—Ç–æ–≤')
                        st.subheader("üìã –°–≤–æ–¥–∫–∞ –ø–æ —Å—É–±—ä–µ–∫—Ç–∞–º")
                        st.dataframe(summary, use_container_width=True)
                       
                    else:
                        st.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
               
                with col_result2:
                    st.subheader("‚ö†Ô∏è –£–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã")
                    if not duplicate_visits.empty:
                        st.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicate_visits)} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤")
                       
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
                        for _, row in duplicate_visits.iterrows():
                            with st.expander(f"üë§ {row['subject_id']} - {row['visit_name']}"):
                                st.write(f"**–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞:** {row['visit_date']}")
                                if 'previous_visit_date' in row:
                                    st.write(f"**–†–∞–Ω–µ–µ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞:** {row['previous_visit_date']}")
                                    st.write(f"**–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã:** {row['previous_payment_date']}")
                               
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –¥–∞—Ç–∞
                                if 'previous_visit_date' in row and row['visit_date'] != row['previous_visit_date']:
                                    st.error("üîÑ **–í–ù–ò–ú–ê–ù–ò–ï:** –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å!")
                                else:
                                    st.info("üìÖ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
                       
                    else:
                        st.info("‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
               
                with col_result3:
                    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                   
                    if not duplicate_visits.empty:
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–∑–∏—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                        changed_dates = 0
                        unchanged_dates = 0
                       
                        for _, row in duplicate_visits.iterrows():
                            if 'previous_visit_date' in row and row['visit_date'] != row['previous_visit_date']:
                                changed_dates += 1
                            else:
                                unchanged_dates += 1
                       
                        st.metric("–í–∏–∑–∏—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –¥–∞—Ç–æ–π", changed_dates)
                        st.metric("–í–∏–∑–∏—Ç—ã —Å —Ç–æ–π –∂–µ –¥–∞—Ç–æ–π", unchanged_dates)
                       
                        if changed_dates > 0:
                            st.error("‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç!")
                   
                    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    total_new = len(new_visits) if not new_visits.empty else 0
                    total_duplicates = len(duplicate_visits) if not duplicate_visits.empty else 0
                   
                    st.metric("–í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ", len(df))
                    st.metric("–ö –æ–ø–ª–∞—Ç–µ", total_new)
                    st.metric("–£–∂–µ –æ–ø–ª–∞—á–µ–Ω—ã", total_duplicates)
               
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                if not new_visits.empty:
                    st.markdown("---")
                    col_btn1, col_btn2, col_btn3 = st.columns(3)
                   
                    with col_btn1:
                        # –°–∫–∞—á–∞—Ç—å –∞–∫—Ç –æ–ø–ª–∞—Ç—ã
                        from io import BytesIO
                        excel_buffer = BytesIO()
                        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                            new_visits.to_excel(writer, sheet_name='–ù–æ–≤—ã–µ –≤–∏–∑–∏—Ç—ã', index=False)
                            if not new_visits.empty:
                                summary = new_visits.groupby('subject_id').size().reset_index(name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∏–∑–∏—Ç–æ–≤')
                                summary.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
                            if not duplicate_visits.empty:
                                duplicate_visits.to_excel(writer, sheet_name='–£–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ', index=False)
                       
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                            data=excel_buffer.getvalue(),
                            file_name=f"otchet_oplaty_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                   
                    with col_btn2:
                        if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ", type="primary"):
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
                            new_visits_to_save = new_visits.copy()
                            new_visits_to_save['payment_date'] = datetime.now().strftime('%Y-%m-%d')
                            new_visits_to_save['payment_amount'] = 0.0
                           
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                            save_paid_visits(new_visits_to_save[['subject_id', 'visit_name', 'visit_date', 'payment_date', 'payment_amount']])
                           
                            st.success("‚úÖ –ù–æ–≤—ã–µ –≤–∏–∑–∏—Ç—ã –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ!")
                            st.rerun()
                   
                    with col_btn3:
                        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                            st.rerun()
               
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
   
    with col2:
        st.header("üìà –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç")
        paid_visits = load_paid_visits()
       
        if not paid_visits.empty:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")
            recent_payments = paid_visits.sort_values('payment_date', ascending=False).head(10)
            for _, payment in recent_payments.iterrows():
                st.text(f"üìÖ {payment['payment_date']}")
                st.text(f"üë§ –°—É–±—ä–µ–∫—Ç: {payment['subject_id']}")
                st.text(f"üè• –í–∏–∑–∏—Ç: {payment['visit_name']}")
                st.text(f"üìÜ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: {payment['visit_date']}")
                st.markdown("---")
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞—è")
       
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
       
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é"):
            if not paid_visits.empty:
                st.dataframe(paid_visits, use_container_width=True)
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è")
       
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ–ø–ª–∞—Ç–∞—Ö"):
            if st.button("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", type="secondary"):
                conn = sqlite3.connect('payments.db')
                cursor = conn.cursor()
                cursor.execute("DELETE FROM paid_visits")
                conn.commit()
                conn.close()
                st.success("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
                st.rerun()

if __name__ == "__main__":
    main()