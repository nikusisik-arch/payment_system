import streamlit as st
import pandas as pd
import json
import requests
import base64
from datetime import datetime
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Payment System",
    page_icon="üí∞",
    layout="wide"
)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ secrets
try:
    GITHUB_TOKEN = st.secrets["GITHUB_TOKEN"]
    REPO_OWNER = st.secrets["REPO_OWNER"] 
    REPO_NAME = st.secrets["REPO_NAME"]
    FILE_PATH = "data/payments.json"
except KeyError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª secrets.toml")
    st.stop()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
def get_file_from_github():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ GitHub"""
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            content = response.json()
            file_content = base64.b64decode(content['content']).decode('utf-8')
            data = json.loads(file_content)
            return data, content['sha']
        else:
            return [], None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return [], None

def save_file_to_github(data, sha=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ GitHub"""
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    content = base64.b64encode(
        json.dumps(data, ensure_ascii=False, indent=2).encode('utf-8')
    ).decode('utf-8')
    
    payload = {
        "message": f"Update payments data - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "content": content
    }
    
    if sha:
        payload["sha"] = sha
    
    try:
        response = requests.put(url, headers=headers, json=payload)
        return response.status_code in [200, 201]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_paid_visits():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –∏–∑ GitHub"""
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub..."):
        data, sha = get_file_from_github()
        if data:
            df = pd.DataFrame(data)
            st.session_state['github_sha'] = sha
            return df
        else:
            st.session_state['github_sha'] = None
            return pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date', 'payment_date', 'payment_amount'])

def save_paid_visits(visits_df):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –≤ GitHub"""
    with st.spinner("–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GitHub..."):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        existing_data, current_sha = get_file_from_github()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        new_data = visits_df.to_dict('records')
        all_data = existing_data + new_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
        success = save_file_to_github(all_data, current_sha)
        
        if success:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub!")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            st.session_state['github_sha'] = None
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub")
        
        return success

def clear_all_data():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ GitHub"""
    with st.spinner("–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GitHub..."):
        existing_data, current_sha = get_file_from_github()
        success = save_file_to_github([], current_sha)
        
        if success:
            st.success("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
            st.session_state['github_sha'] = None
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        return success

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
def process_visits(uploaded_df):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã"""
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    uploaded_df.columns = ['subject_id', 'visit_name', 'visit_date']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
    uploaded_df['visit_date'] = pd.to_datetime(uploaded_df['visit_date']).dt.strftime('%Y-%m-%d')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã
    paid_visits = load_paid_visits()
    
    if not paid_visits.empty:
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        uploaded_df['full_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_name'].astype(str) + '_' + uploaded_df['visit_date'].astype(str)
        paid_visits['full_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_name'].astype(str) + '_' + paid_visits['visit_date'].astype(str)
        
        uploaded_df['visit_type_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_name'].astype(str)
        paid_visits['visit_type_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_name'].astype(str)
        
        uploaded_df['date_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_date'].astype(str)
        paid_visits['date_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_date'].astype(str)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        exact_duplicates_mask = uploaded_df['full_key'].isin(paid_visits['full_key'])
        same_visit_type_mask = (uploaded_df['visit_type_key'].isin(paid_visits['visit_type_key'])) & (~exact_duplicates_mask)
        same_date_mask = (uploaded_df['date_key'].isin(paid_visits['date_key'])) & (~exact_duplicates_mask) & (~same_visit_type_mask)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        new_visits = uploaded_df[~exact_duplicates_mask & ~same_visit_type_mask & ~same_date_mask].copy()
        exact_duplicates = uploaded_df[exact_duplicates_mask].copy()
        same_visit_different_date = uploaded_df[same_visit_type_mask].copy()
        suspicious_same_date = uploaded_df[same_date_mask].copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
        if not exact_duplicates.empty:
            exact_duplicates = exact_duplicates.merge(
                paid_visits[['full_key', 'payment_date']].rename(columns={'payment_date': 'previous_payment_date'}),
                on='full_key', how='left'
            )
        
        if not same_visit_different_date.empty:
            same_visit_different_date = same_visit_different_date.merge(
                paid_visits[['visit_type_key', 'visit_date', 'payment_date']].rename(columns={
                    'visit_date': 'previous_visit_date', 'payment_date': 'previous_payment_date'
                }),
                on='visit_type_key', how='left'
            )
        
        if not suspicious_same_date.empty:
            suspicious_same_date = suspicious_same_date.merge(
                paid_visits[['date_key', 'visit_name', 'payment_date']].rename(columns={
                    'visit_name': 'previous_visit_name', 'payment_date': 'previous_payment_date'
                }),
                on='date_key', how='left'
            )
        
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        columns_to_drop = ['full_key', 'visit_type_key', 'date_key']
        for df in [new_visits, exact_duplicates, same_visit_different_date, suspicious_same_date]:
            if not df.empty:
                df.drop(columns_to_drop, axis=1, inplace=True)
        
    else:
        new_visits = uploaded_df.copy()
        exact_duplicates = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
        same_visit_different_date = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
        suspicious_same_date = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
    
    return new_visits, exact_duplicates, same_visit_different_date, suspicious_same_date, paid_visits

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    def main():
        import streamlit as st
import pandas as pd
import json
import requests
import base64
from datetime import datetime
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Payment System",
    page_icon="üí∞",
    layout="wide"
)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ secrets
try:
    GITHUB_TOKEN = st.secrets["GITHUB_TOKEN"]
    REPO_OWNER = st.secrets["REPO_OWNER"] 
    REPO_NAME = st.secrets["REPO_NAME"]
    FILE_PATH = "data/payments.json"
except KeyError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª secrets.toml")
    st.stop()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitHub
def get_file_from_github():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ GitHub"""
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            content = response.json()
            file_content = base64.b64decode(content['content']).decode('utf-8')
            data = json.loads(file_content)
            return data, content['sha']
        else:
            return [], None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return [], None

def save_file_to_github(data, sha=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ GitHub"""
    url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    
    content = base64.b64encode(
        json.dumps(data, ensure_ascii=False, indent=2).encode('utf-8')
    ).decode('utf-8')
    
    payload = {
        "message": f"Update payments data - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        "content": content
    }
    
    if sha:
        payload["sha"] = sha
    
    try:
        response = requests.put(url, headers=headers, json=payload)
        return response.status_code in [200, 201]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_paid_visits():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –∏–∑ GitHub"""
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub..."):
        data, sha = get_file_from_github()
        if data:
            df = pd.DataFrame(data)
            st.session_state['github_sha'] = sha
            return df
        else:
            st.session_state['github_sha'] = None
            return pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date', 'payment_date', 'payment_amount'])

def save_paid_visits(visits_df):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –≤ GitHub"""
    with st.spinner("–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GitHub..."):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        existing_data, current_sha = get_file_from_github()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        new_data = visits_df.to_dict('records')
        all_data = existing_data + new_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
        success = save_file_to_github(all_data, current_sha)
        
        if success:
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub!")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            st.session_state['github_sha'] = None
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub")
        
        return success

def clear_all_data():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ GitHub"""
    with st.spinner("–û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GitHub..."):
        existing_data, current_sha = get_file_from_github()
        success = save_file_to_github([], current_sha)
        
        if success:
            st.success("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
            st.session_state['github_sha'] = None
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        return success

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤
def process_visits(uploaded_df):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã"""
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    uploaded_df.columns = ['subject_id', 'visit_name', 'visit_date']
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
    uploaded_df['visit_date'] = pd.to_datetime(uploaded_df['visit_date']).dt.strftime('%Y-%m-%d')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –≤–∏–∑–∏—Ç—ã
    paid_visits = load_paid_visits()
    
    if not paid_visits.empty:
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        uploaded_df['full_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_name'].astype(str) + '_' + uploaded_df['visit_date'].astype(str)
        paid_visits['full_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_name'].astype(str) + '_' + paid_visits['visit_date'].astype(str)
        
        uploaded_df['visit_type_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_name'].astype(str)
        paid_visits['visit_type_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_name'].astype(str)
        
        uploaded_df['date_key'] = uploaded_df['subject_id'].astype(str) + '_' + uploaded_df['visit_date'].astype(str)
        paid_visits['date_key'] = paid_visits['subject_id'].astype(str) + '_' + paid_visits['visit_date'].astype(str)
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        exact_duplicates_mask = uploaded_df['full_key'].isin(paid_visits['full_key'])
        same_visit_type_mask = (uploaded_df['visit_type_key'].isin(paid_visits['visit_type_key'])) & (~exact_duplicates_mask)
        same_date_mask = (uploaded_df['date_key'].isin(paid_visits['date_key'])) & (~exact_duplicates_mask) & (~same_visit_type_mask)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        new_visits = uploaded_df[~exact_duplicates_mask & ~same_visit_type_mask & ~same_date_mask].copy()
        exact_duplicates = uploaded_df[exact_duplicates_mask].copy()
        same_visit_different_date = uploaded_df[same_visit_type_mask].copy()
        suspicious_same_date = uploaded_df[same_date_mask].copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
        if not exact_duplicates.empty:
            exact_duplicates = exact_duplicates.merge(
                paid_visits[['full_key', 'payment_date']].rename(columns={'payment_date': 'previous_payment_date'}),
                on='full_key', how='left'
            )
        
        if not same_visit_different_date.empty:
            same_visit_different_date = same_visit_different_date.merge(
                paid_visits[['visit_type_key', 'visit_date', 'payment_date']].rename(columns={
                    'visit_date': 'previous_visit_date', 'payment_date': 'previous_payment_date'
                }),
                on='visit_type_key', how='left'
            )
        
        if not suspicious_same_date.empty:
            suspicious_same_date = suspicious_same_date.merge(
                paid_visits[['date_key', 'visit_name', 'payment_date']].rename(columns={
                    'visit_name': 'previous_visit_name', 'payment_date': 'previous_payment_date'
                }),
                on='date_key', how='left'
            )
        
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        columns_to_drop = ['full_key', 'visit_type_key', 'date_key']
        for df in [new_visits, exact_duplicates, same_visit_different_date, suspicious_same_date]:
            if not df.empty:
                df.drop(columns_to_drop, axis=1, inplace=True)
        
    else:
        new_visits = uploaded_df.copy()
        exact_duplicates = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
        same_visit_different_date = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
        suspicious_same_date = pd.DataFrame(columns=['subject_id', 'visit_name', 'visit_date'])
    
    return new_visits, exact_duplicates, same_visit_different_date, suspicious_same_date, paid_visits

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
    st.write("üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub:**")
    
    try:
        st.write(f"**REPO_OWNER:** {REPO_OWNER}")
        st.write(f"**REPO_NAME:** {REPO_NAME}")
        st.write(f"**–¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:** {GITHUB_TOKEN[:10]}...")
        st.write(f"**–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:** {len(GITHUB_TOKEN)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        response = requests.get(url, headers=headers)
        
        st.write(f"**–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GitHub API:** {response.status_code}")
        
        if response.status_code == 200:
            st.success("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª data/payments.json
            file_url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}/contents/{FILE_PATH}"
            file_response = requests.get(file_url, headers=headers)
            st.write(f"**–°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ data/payments.json:** {file_response.status_code}")
            
            if file_response.status_code == 200:
                st.success("‚úÖ –§–∞–π–ª data/payments.json –Ω–∞–π–¥–µ–Ω!")
            elif file_response.status_code == 404:
                st.warning("‚ö†Ô∏è –§–∞–π–ª data/payments.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
                st.info("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª data/payments.json –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: []")
            
        elif response.status_code == 404:
            st.error("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REPO_OWNER –∏ REPO_NAME")
        elif response.status_code == 401:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GITHUB_TOKEN")
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            if response.text:
                st.code(response.text)
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    st.markdown("---")
    
    # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π CSS
    st.markdown("""
    <style>
    .app-header {
        display: flex;
        align-items: center;
        padding: 1rem 0 2rem 0;
        border-bottom: 1px solid #e6e9ef;
        margin-bottom: 2rem;
    }
    .app-logo {
        display: flex;
        align-items: center;
        margin-right: auto;
    }
    .logo-icon {
        width: 40px;
        height: 40px;
        background: #1f77b4;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-right: 1rem;
        color: white;
    }
    .app-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: #1f77b4;
        margin: 0;
    }
    .app-version {
        background: #f8f9fa;
        color: #6c757d;
        padding: 0.2rem 0.6rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="app-header">
        <div class="app-logo">
            <div class="logo-icon">üí∞</div>
            <div class="app-title">Payment System</div>
        </div>
        <div class="app-version">v2.0 GitHub</div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("### üîó –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ GitHub (–Ω–∞–¥–µ–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)")
    st.markdown("---")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
    st.write("üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub:**")
    
    try:
        st.write(f"**REPO_OWNER:** {REPO_OWNER}")
        st.write(f"**REPO_NAME:** {REPO_NAME}")
        st.write(f"**–¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:** {GITHUB_TOKEN[:10]}...")
        st.write(f"**–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:** {len(GITHUB_TOKEN)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        url = f"https://api.github.com/repos/{REPO_OWNER}/{REPO_NAME}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        response = requests.get(url, headers=headers)
        
        st.write(f"**–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GitHub API:** {response.status_code}")
        
        if response.status_code == 200:
            st.success("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω!")
        elif response.status_code == 404:
            st.error("‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REPO_OWNER –∏ REPO_NAME")
        elif response.status_code == 401:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GITHUB_TOKEN")
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    st.markdown("---")
    
    # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π CSS
    st.markdown("""
    <style>
    .app-header {
        display: flex;
        align-items: center;
        padding: 1rem 0 2rem 0;
        border-bottom: 1px solid #e6e9ef;
        margin-bottom: 2rem;
    }
    .app-logo {
        display: flex;
        align-items: center;
        margin-right: auto;
    }
    .logo-icon {
        width: 40px;
        height: 40px;
        background: #1f77b4;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-right: 1rem;
        color: white;
    }
    .app-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: #1f77b4;
        margin: 0;
    }
    .app-version {
        background: #f8f9fa;
        color: #6c757d;
        padding: 0.2rem 0.6rem;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="app-header">
        <div class="app-logo">
            <div class="logo-icon">üí∞</div>
            <div class="app-title">Payment System</div>
        </div>
        <div class="app-version">v2.0 GitHub</div>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("### üîó –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ GitHub (–Ω–∞–¥–µ–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub
    with st.sidebar:
        st.header("üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        try:
            data, sha = get_file_from_github()
            st.success("‚úÖ GitHub –ø–æ–¥–∫–ª—é—á–µ–Ω")
            st.info(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {len(data)}")
        except:
            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub")
        
        st.markdown("---")
        
        st.header("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        st.markdown("""
        **–§–æ—Ä–º–∞—Ç Excel-—Ñ–∞–π–ª–∞:**
        - –°—Ç–æ–ª–±–µ—Ü A: ID —Å—É–±—ä–µ–∫—Ç–∞
        - –°—Ç–æ–ª–±–µ—Ü B: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞  
        - –°—Ç–æ–ª–±–µ—Ü C: –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞
        
        **üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:**
        - **–¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã**: ID + –≤–∏–∑–∏—Ç + –¥–∞—Ç–∞
        - **–¢–æ—Ç –∂–µ —Ç–∏–ø –≤–∏–∑–∏—Ç–∞**: ID + –≤–∏–∑–∏—Ç (–¥—Ä—É–≥–∞—è –¥–∞—Ç–∞)
        - **–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ**: ID + –¥–∞—Ç–∞ (–¥—Ä—É–≥–æ–π –≤–∏–∑–∏—Ç)
        """)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([3, 1])
    
    with col1:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∏–∑–∏—Ç–æ–≤",
            type=['xlsx', 'xls'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: ID —Å—É–±—ä–µ–∫—Ç–∞, –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞, –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞"
        )
        
        if uploaded_file is not None:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = pd.read_excel(uploaded_file)
                
                st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                st.subheader("üëÄ –ü—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                st.dataframe(df.head(10), use_container_width=True)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                new_visits, exact_duplicates, same_visit_different_date, suspicious_same_date, paid_visits = process_visits(df.copy())
                
                st.markdown("---")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
                tab1, tab2, tab3, tab4, tab5 = st.tabs([
                    f"üÜï –ù–æ–≤—ã–µ –≤–∏–∑–∏—Ç—ã ({len(new_visits)})", 
                    f"‚ö†Ô∏è –¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã ({len(exact_duplicates)})",
                    f"üîÑ –¢–æ—Ç –∂–µ —Ç–∏–ø –≤–∏–∑–∏—Ç–∞ ({len(same_visit_different_date)})",
                    f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ ({len(suspicious_same_date)})",
                    f"üìä –°–≤–æ–¥–∫–∞"
                ])
                
                with tab1:
                    st.subheader("üÜï –ù–æ–≤—ã–µ –≤–∏–∑–∏—Ç—ã –∫ –æ–ø–ª–∞—Ç–µ")
                    if not new_visits.empty:
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(new_visits)} –Ω–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤")
                        st.dataframe(new_visits, use_container_width=True)
                        
                        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–±—ä–µ–∫—Ç–∞–º
                        summary = new_visits.groupby('subject_id').size().reset_index(name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∏–∑–∏—Ç–æ–≤')
                        st.subheader("üìã –°–≤–æ–¥–∫–∞ –ø–æ —Å—É–±—ä–µ–∫—Ç–∞–º")
                        st.dataframe(summary, use_container_width=True)
                        
                    else:
                        st.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã")
                
                with tab2:
                    st.subheader("‚ö†Ô∏è –¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã")
                    if not exact_duplicates.empty:
                        st.error(f"üö´ –ù–∞–π–¥–µ–Ω–æ {len(exact_duplicates)} —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤!")
                        st.warning("**–≠—Ç–∏ –≤–∏–∑–∏—Ç—ã —É–∂–µ –±—ã–ª–∏ –æ–ø–ª–∞—á–µ–Ω—ã —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏**")
                        
                        for _, row in exact_duplicates.iterrows():
                            with st.expander(f"üö´ {row['subject_id']} - {row['visit_name']} - {row['visit_date']}"):
                                st.write(f"**ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:** {row['subject_id']}")
                                st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞:** {row['visit_name']}")
                                st.write(f"**–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞:** {row['visit_date']}")
                                if 'previous_payment_date' in row and pd.notna(row['previous_payment_date']):
                                    st.write(f"**–î–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã:** {row['previous_payment_date']}")
                                st.error("‚ùå **–¢–û–ß–ù–´–ô –î–£–ë–õ–ò–ö–ê–¢**: –ù–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω!")
                        
                    else:
                        st.success("‚úÖ –¢–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                with tab3:
                    st.subheader("üîÑ –¢–æ—Ç –∂–µ —Ç–∏–ø –≤–∏–∑–∏—Ç–∞ —Å –¥—Ä—É–≥–æ–π –¥–∞—Ç–æ–π")
                    if not same_visit_different_date.empty:
                        st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(same_visit_different_date)} –≤–∏–∑–∏—Ç–æ–≤ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞—Ç–∞–º–∏")
                        st.info("**–í–∏–∑–∏—Ç—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞, –Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞—Ç–∞–º–∏. –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞—Ç–∞ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.**")
                        
                        for _, row in same_visit_different_date.iterrows():
                            with st.expander(f"‚ö†Ô∏è {row['subject_id']} - {row['visit_name']} - {row['visit_date']}"):
                                st.write(f"**ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:** {row['subject_id']}")
                                st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞:** {row['visit_name']}")
                                st.write(f"**–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞:** {row['visit_date']}")
                                if 'previous_visit_date' in row and pd.notna(row['previous_visit_date']):
                                    st.write(f"**–†–∞–Ω–µ–µ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –¥–∞—Ç–∞:** {row['previous_visit_date']}")
                                    st.write(f"**–î–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã:** {row['previous_payment_date']}")
                                st.warning("üîÑ **–î–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω—É–∂–Ω–∞ –ª–∏ –¥–æ–ø–ª–∞—Ç–∞")
                        
                        # –û–ø—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø–ª–∞—Ç—É
                        st.markdown("---")
                        add_same_type = st.checkbox("‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ –≤–∏–∑–∏—Ç—ã –∫ –æ–ø–ª–∞—Ç–µ", 
                                                   help="–û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ –≤–∏–∑–∏—Ç—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å",
                                                   key="add_same_type_checkbox")
                        
                    else:
                        st.success("‚úÖ –í–∏–∑–∏—Ç–æ–≤ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        add_same_type = False
                
                with tab4:
                    st.subheader("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑–∏—Ç—ã (–æ–¥–Ω–∞ –¥–∞—Ç–∞, —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)")
                    if not suspicious_same_date.empty:
                        st.error(f"üö® –ù–∞–π–¥–µ–Ω–æ {len(suspicious_same_date)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤!")
                        st.warning("**–£ –æ–¥–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω—ã —Ä–∞–∑–Ω—ã–µ –≤–∏–∑–∏—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.**")
                        
                        for _, row in suspicious_same_date.iterrows():
                            with st.expander(f"üö® {row['subject_id']} - {row['visit_name']} - {row['visit_date']}"):
                                st.write(f"**ID –ø–∞—Ü–∏–µ–Ω—Ç–∞:** {row['subject_id']}")
                                st.write(f"**–¢–µ–∫—É—â–∏–π –≤–∏–∑–∏—Ç:** {row['visit_name']}")
                                st.write(f"**–î–∞—Ç–∞:** {row['visit_date']}")
                                if 'previous_visit_name' in row and pd.notna(row['previous_visit_name']):
                                    st.write(f"**–†–∞–Ω–µ–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –≤–∏–∑–∏—Ç –≤ —ç—Ç—É –¥–∞—Ç—É:** {row['previous_visit_name']}")
                                    st.write(f"**–î–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã:** {row['previous_payment_date']}")
                                st.error("üö® **–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û**: –î–≤–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∏–∑–∏—Ç–∞ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å!")
                                st.info("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ò–†–ö, –∫–∞–∫–æ–π –≤–∏–∑–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
                        
                        # –û–ø—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–ø–ª–∞—Ç—É
                        st.markdown("---")
                        add_suspicious = st.checkbox("‚ö†Ô∏è –í—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ", 
                                                    help="–û—Ç–º–µ—Ç—å—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
                                                    key="add_suspicious_checkbox")
                        
                    else:
                        st.success("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        add_suspicious = False
                
                with tab5:
                    st.subheader("üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞")
                    
                    col_stat1, col_stat2, col_stat3, col_stat4, col_stat5 = st.columns(5)
                    
                    with col_stat1:
                        st.metric("–í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ", len(df))
                    
                    with col_stat2:
                        st.metric("–ù–æ–≤—ã–µ –∫ –æ–ø–ª–∞—Ç–µ", len(new_visits))
                    
                    with col_stat3:
                        st.metric("–¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã", len(exact_duplicates))
                    
                    with col_stat4:
                        st.metric("–¢–æ—Ç –∂–µ —Ç–∏–ø –≤–∏–∑–∏—Ç–∞", len(same_visit_different_date))
                    
                    with col_stat5:
                        st.metric("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", len(suspicious_same_date))
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    st.markdown("---")
                    st.subheader("üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    
                    if len(exact_duplicates) > 0:
                        st.error(f"üö´ **{len(exact_duplicates)} —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –æ–ø–ª–∞—Ç—ã")
                    
                    if len(same_visit_different_date) > 0:
                        st.warning(f"‚ö†Ô∏è **{len(same_visit_different_date)} –≤–∏–∑–∏—Ç–æ–≤** —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ —Ä–µ—à–∏—Ç–µ")
                    
                    if len(suspicious_same_date) > 0:
                        st.error(f"üö® **{len(suspicious_same_date)} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤** - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ò–†–ö!")
                    
                    if len(new_visits) > 0:
                        st.success(f"‚úÖ **{len(new_visits)} –Ω–æ–≤—ã—Ö –≤–∏–∑–∏—Ç–æ–≤** –≥–æ—Ç–æ–≤—ã –∫ –æ–ø–ª–∞—Ç–µ")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                visits_to_pay = new_visits.copy()
                
                if 'add_same_type' in locals() and add_same_type and not same_visit_different_date.empty:
                    visits_to_pay = pd.concat([visits_to_pay, same_visit_different_date[['subject_id', 'visit_name', 'visit_date']]], ignore_index=True)
                
                if 'add_suspicious' in locals() and add_suspicious and not suspicious_same_date.empty:
                    visits_to_pay = pd.concat([visits_to_pay, suspicious_same_date[['subject_id', 'visit_name', 'visit_date']]], ignore_index=True)
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                if not visits_to_pay.empty:
                    st.markdown("---")
                    st.subheader("üéØ –î–µ–π—Å—Ç–≤–∏—è")
                    
                    col_btn1, col_btn2, col_btn3 = st.columns(3)
                    
                    with col_btn1:
                        # –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                        excel_buffer = io.BytesIO()
                        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                            visits_to_pay.to_excel(writer, sheet_name='–ö –æ–ø–ª–∞—Ç–µ', index=False)
                            
                            if not visits_to_pay.empty:
                                summary = visits_to_pay.groupby('subject_id').size().reset_index(name='–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∏–∑–∏—Ç–æ–≤')
                                summary.to_excel(writer, sheet_name='–°–≤–æ–¥–∫–∞', index=False)
                            
                            if not exact_duplicates.empty:
                                exact_duplicates.to_excel(writer, sheet_name='–¢–æ—á–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã', index=False)
                            
                            if not same_visit_different_date.empty:
                                same_visit_different_date.to_excel(writer, sheet_name='–¢–æ—Ç –∂–µ —Ç–∏–ø –≤–∏–∑–∏—Ç–∞', index=False)
                            
                            if not suspicious_same_date.empty:
                                suspicious_same_date.to_excel(writer, sheet_name='–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ', index=False)
                        
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
                            data=excel_buffer.getvalue(),
                            file_name=f"polnyj_otchet_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key="download_report_btn"
                        )
                    
                    with col_btn2:
                        if st.button("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ", type="primary", key="mark_paid_btn"):
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
                            visits_to_save = visits_to_pay.copy()
                            visits_to_save['payment_date'] = datetime.now().strftime('%Y-%m-%d')
                            visits_to_save['payment_amount'] = 0.0
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ GitHub
                            success = save_paid_visits(visits_to_save[['subject_id', 'visit_name', 'visit_date', 'payment_date', 'payment_amount']])
                            
                            if success:
                                st.success(f"‚úÖ {len(visits_to_pay)} –≤–∏–∑–∏—Ç–æ–≤ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ!")
                                st.rerun()
                    
                    with col_btn3:
                        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="refresh_data_btn"):
                            st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    
    with col2:
        st.header("üìà –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        paid_visits = load_paid_visits()
        
        if not paid_visits.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            st.metric("–í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –≤–∏–∑–∏—Ç–æ–≤", len(paid_visits))
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—É–±—ä–µ–∫—Ç–æ–≤", paid_visits['subject_id'].nunique())
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∏–∑–∏—Ç–æ–≤", paid_visits['visit_name'].nunique())
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
            st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—Ç—ã")
            recent_payments = paid_visits.sort_values('payment_date', ascending=False).head(5)
            for _, payment in recent_payments.iterrows():
                with st.container():
                    st.text(f"üìÖ {payment['payment_date']}")
                    st.text(f"üë§ {payment['subject_id']}")
                    st.text(f"üè• {payment['visit_name']}")
                    st.text(f"üìÜ {payment['visit_date']}")
                    st.markdown("---")
        else:
            st.info("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞—è")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", key="show_history_btn"):
            if not paid_visits.empty:
                st.dataframe(paid_visits[['subject_id', 'visit_name', 'visit_date', 'payment_date']], use_container_width=True)
            else:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
        if not paid_visits.empty:
            excel_buffer = io.BytesIO()
            paid_visits.to_excel(excel_buffer, index=False, engine='openpyxl')
            
            st.download_button(
                label="üì• –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ Excel",
                data=excel_buffer.getvalue(),
                file_name=f"istoriya_oplat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key="export_history_btn"
            )
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if 'confirm_delete' not in st.session_state:
            st.session_state.confirm_delete = False
        
        if not st.session_state.confirm_delete:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–± –æ–ø–ª–∞—Ç–∞—Ö", key="clear_history_btn"):
                st.session_state.confirm_delete = True
                st.rerun()
        else:
            st.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–ª–∞—Ç?")
            
            col_confirm1, col_confirm2 = st.columns(2)
            
            with col_confirm1:
                if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", type="primary", key="confirm_delete_btn"):
                    success = clear_all_data()
                    if success:
                        st.session_state.confirm_delete = False
                        st.rerun()
            
            with col_confirm2:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∞", key="cancel_delete_btn"):
                    st.session_state.confirm_delete = False
                    st.rerun()

if __name__ == "__main__":
    main()



